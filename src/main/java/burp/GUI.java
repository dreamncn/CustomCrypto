package burp;

import com.alibaba.fastjson.JSONObject;


import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Objects;

public class GUI {
	private JList list1;
	private JTextField textField1;
	private JTextField textField2;
	private JButton test_button;
	private JButton save_button;
	private JButton delete_button;
	private JPanel mainPanel;
	private JButton button_python;
	private JButton button_java;
	private JButton button_php;
	private JButton button_js;
	private JSONObject jsonObjectConfig;

	public GUI() {
		$$$setupUI$$$();
		refresh();
		list1.addListSelectionListener(e -> {
			if (list1.getSelectedValue() == null) return;
			String index = list1.getSelectedValue().toString();
			textField1.setText(index);
			textField2.setText(jsonObjectConfig.getString(index));
		});
		test_button.addActionListener(e -> {
			if (!Objects.equals(textField1.getText(), "") && !Objects.equals(textField2.getText(), "")) {
				String inputValue = JOptionPane.showInputDialog("请输入需要加密或者解密的数据");

				Object[] options = {"收到Request请求","发送Request请求", "收到Response请求","发送Response请求"};
				int response = JOptionPane.showOptionDialog($$$getRootComponent$$$(), "请选择该数据的请求类型", "提示", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
				try {
					String result = run(textField2.getText(), String.valueOf(response), inputValue);
					Object[] options2 = {"复制加解密结果", "关闭"};
					int response2 = JOptionPane.showOptionDialog($$$getRootComponent$$$(), result, "加解密结果", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options2, options2[0]);
					if (response2 == 0) {
						setClipboardString(result);

					}

				} catch (Exception exception) {
					exception.printStackTrace();
				}
			} else {
				JOptionPane.showMessageDialog(null, "请先完成设置再测试", "错误",
						JOptionPane.ERROR_MESSAGE);
			}


		});
		save_button.addActionListener(e -> {
			if (!Objects.equals(textField1.getText(), "") && !Objects.equals(textField2.getText(), "")) {
				jsonObjectConfig.put(textField1.getText(), textField2.getText());
				writeConfig(jsonObjectConfig.toJSONString());
				refresh();
			} else {
				JOptionPane.showMessageDialog(null, "请先完成设置再测试", "错误",
						JOptionPane.ERROR_MESSAGE);
			}

		});
		delete_button.addActionListener(e -> {
			if (!Objects.equals(textField1.getText(), "") && !Objects.equals(textField2.getText(), "")) {
				jsonObjectConfig.remove(textField1.getText());
				writeConfig(jsonObjectConfig.toJSONString());
				refresh();
			} else {
				JOptionPane.showMessageDialog(null, "请先完成设置再测试", "错误", JOptionPane.ERROR_MESSAGE);
			}
		});

		button_js.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setClipboardString(new String(Base64.getDecoder().decode(Template.JS.getBytes())));
			}
		});
		button_php.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setClipboardString(new String(Base64.getDecoder().decode(Template.PHP.getBytes())));
			}
		});
		button_java.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setClipboardString(new String(Base64.getDecoder().decode(Template.JAVA.getBytes())));
			}
		});
		button_python.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setClipboardString(new String(Base64.getDecoder().decode(Template.PY.getBytes())));
			}
		});

		BurpExtender.callbacks.customizeUiComponent(mainPanel);
	}


	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridBagLayout());
		final JScrollPane scrollPane1 = new JScrollPane();
		scrollPane1.setMaximumSize(new Dimension(250, -1));
		scrollPane1.setMinimumSize(new Dimension(250, -1));
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		mainPanel.add(scrollPane1, gbc);
		list1 = new JList();
		scrollPane1.setViewportView(list1);
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(0, 10, 0, 0);
		mainPanel.add(panel1, gbc);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel2, gbc);
		final JLabel label1 = new JLabel();
		label1.setText("需要监控的网址：");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		panel2.add(label1, gbc);
		final JLabel label2 = new JLabel();
		label2.setText("需要执行的命令：");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		panel2.add(label2, gbc);
		textField1 = new JTextField();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel2.add(textField1, gbc);
		textField2 = new JTextField();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel2.add(textField2, gbc);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel3, gbc);
		test_button = new JButton();
		test_button.setText("测试");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel3.add(test_button, gbc);
		save_button = new JButton();
		save_button.setText("保存");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel3.add(save_button, gbc);
		delete_button = new JButton();
		delete_button.setText("删除");
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel3.add(delete_button, gbc);
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel4, gbc);
		button_python = new JButton();
		button_python.setText("复制Python3模板");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel4.add(button_python, gbc);
		button_java = new JButton();
		button_java.setText("复制Java模板");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel4.add(button_java, gbc);
		button_php = new JButton();
		button_php.setText("复制PHP模板");
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel4.add(button_php, gbc);
		button_js = new JButton();
		button_js.setText("复制JS模板");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel4.add(button_js, gbc);
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel5, gbc);
		final JLabel label3 = new JLabel();
		label3.setText("<html><body><p><h3>需要监控的网址：</h3><pre>原则：可多不可少<br>例如http://localhost/则匹配以这个URL开头的所有路径</pre></p><p><h3>需要执行的命令例如(地址建议写绝对地址)：</h3><pre>node 1.js<br>python 1.py<br>php 1.php<br>java Main (Main.java必须先进行编译：javac Main.java)</pre></p><p><h3>命令行参数说明：</h3><pre>所有参数没有参数名，而是依次传入，第一个参数标识加（1）解（0）密，第二个参数标识需要加解密的数据，该数据使用Base64编码后在进行Url编码传入</pre></p>\t\t\t<p><h3>完整调用示例：</h3><pre>加密：node 1.js 1 dGVzdA%3D%3D<br>解密：node 1.js 0 dGVzdA%3D%3D</pre></p>\t\t\t</body></html>");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		panel5.add(label3, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}

	public String findAndRun(String url,String body,String flag){
		BurpExtender.stdout.println("请求："+url);

		if(Objects.equals(body, ""))return body;
		for (String key: jsonObjectConfig.keySet()) {
			if(url.startsWith(key)){
				try{
					body = run(jsonObjectConfig.getString(key),flag,body );
					//BurpExtender.stdout.println("加密或者解密的Body："+body);
					return body;
				}catch (Exception e){
					return body;
				}
			}
		}
		return body;
	}

	private void refresh() {
		String json = readConfig();
		if (json == null) {
			jsonObjectConfig = new JSONObject();
		} else {
			jsonObjectConfig = JSONObject.parseObject(json);
		}
		list1.setListData(jsonObjectConfig.keySet().toArray());
		textField1.setText("");
		textField2.setText("");
	}


	//读配置
	private String readConfig() {
		return BurpExtender.callbacks.loadExtensionSetting("CustomCrypto");
	}

	//写配置
	private void writeConfig(String config) {
		//void IBurpExtenderCallbacks.saveExtensionSetting(字符串名称，字符串值);
		//String IBurpExtenderCallbacks.loadExtensionSetting(字符串名称);
		BurpExtender.callbacks.saveExtensionSetting("CustomCrypto",config);

	}

	public String run(String cmd, String flag, String data) throws Exception {
		data = URLEncoder.encode(Base64.getEncoder().encodeToString(data.getBytes()), "UTF-8");
		return execCmd(cmd + " "+ flag +" " + data);
	}

	private String execCmd(String cmd) throws Exception {
		StringBuilder result = new StringBuilder();

		Process process = null;
		BufferedReader bufrIn = null;
		BufferedReader bufrError = null;

		try {
			// 执行命令, 返回一个子进程对象（命令在子进程中执行）
			process = Runtime.getRuntime().exec(cmd, null, null);

			// 方法阻塞, 等待命令执行完成（成功会返回0）
			process.waitFor();

			// 获取命令执行结果, 有两个结果: 正常的输出 和 错误的输出（PS: 子进程的输出就是主进程的输入）
			bufrIn = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));
			bufrError = new BufferedReader(new InputStreamReader(process.getErrorStream(), StandardCharsets.UTF_8));

			// 读取输出
			String line = null;
			while ((line = bufrIn.readLine()) != null) {
				result.append(line).append('\n');
			}
			while ((line = bufrError.readLine()) != null) {
				result.append(line).append('\n');
			}

		} finally {
			if (bufrIn != null) {
				try {
					bufrIn.close();
				} catch (Exception e) {
					// nothing
				}
			}
			if (bufrError != null) {
				try {
					bufrError.close();
				} catch (Exception e) {
					// nothing
				}
			}

			// 销毁子进程
			if (process != null) {
				process.destroy();
			}
		}

		// 返回执行结果
		return result.toString();
	}

	public static void setClipboardString(String text) {
		// 获取系统剪贴板
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		// 封装文本内容
		Transferable trans = new StringSelection(text);
		// 把文本内容设置到系统剪贴板
		clipboard.setContents(trans, null);

		JOptionPane.showMessageDialog(null, "已经复制到剪切板！", "提示", JOptionPane.PLAIN_MESSAGE);
	}
}
